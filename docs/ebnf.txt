// Symbols
<parenth>       ::= /[\(\)]/
<brace>         ::= /[{}]/
<bracket>       ::= /[\[\]]/
<bool-op>       ::= /[&|]/
<comma>         ::= /,/
<semi>          ::= /;/
<member-op>     ::= /\./
<sci>           ::= /[0-9]+(\.[0-9]+)?e[0-9]+/
<float>         ::= /[0-9]+(\.[0-9]+)?/
<integer>       ::= /[0-9]+/
<string>        ::= /'(\\.|[^'\\])*'/
<asgn-op>       ::= /:=/
<type-op>       ::= /:/
<ref-op>        ::= /#/
<cond-op>       ::= /([<>]=?)|(~=)|=/
<not-op>        ::= /~/
<ret-deref-op>  ::= /->/
<sum-op>        ::= /[+-]/
<mul-op>        ::= /[*\/%]/
<exp-op>        ::= /\^/
<bool-val>      ::= /(true)|(false)/
<keyword>       ::= /(ref)|(if)|(elif)|(else)|(while)|(import)|(fn)|(struct)/
<name>          ::= /[A-Za-z_]+[A-Za-z0-9_]*/

// Compounds
<number>        ::= <integer> | <float> | <sci>
<bool>          ::= <not-op> <bool> <bool-val> | <bool> [ <cond-op> <bool> ]
                | <expr> <cond-op> <expr>
<ident>         ::= name | <expr> <member-op> <ident>
<list-body>     ::= <brace> [ <expr> { <comma> <expr> } ] <brace>
<list>          ::= <bracket> <type-name> <bracket> <list-body>
<map-body>      ::= <brace> [ <expr> <type-op> <expr> { <comma> <expr> <type-op> <expr> } ] <brace>
<map>           ::= <bracket> <type-name> <comma> <type-name> <bracket> <map-body>
<type-name>     ::= [ <keyword> ] { <ptr-op> } <ident>
<term>          ::= <ident> | <list> | <map> | <list-body> | <bool> | <string> 
                | <func-call> | <number> | <func-def>
                | <sum-op> <term> | ( <sum-op> | <ret-deref-op> | <ref-op> ) <term>
<pow-exp>       ::= <pow-exp> | term { <exp-op> pow-exp }
<mul-exp>       ::= <pow-exp> { <mul-op> <pow-exp> }
<expr>          ::= <mul-exp> { <sum-op> <mul-exp> } | <expr> <bracket> <expr> <bracket>
<func-call>     ::= <ident> ( <parenth> [ <list-body> ] <parenth> )
<declaration>   ::= <ident> <type-op> <type-name> [ <asgn-op> <expr> ]
<assignment>    ::= <ident> <asgn-op>  <expr> | <parenth> <expr> <parenth> 
<if>            ::= <keyword> <bool> <scope-dec> { <keyword> <bool> <scope-dec> } [ <keyword> <scope-dec> ]
<while>         ::= <keyword> <bool> <scope-dec>
<stmt>          ::= <scope-dec> | ( <declaration> | <assignment> | <func-call> | <if> | <import> | <func-def> ) ';'
<scope-dec>     ::= <brace> { <stmt> } <brace>
<struct-body>   ::= <brace> { ( <declaration> ) <semi> } <brace>
<def-arg-body>  ::= <name> <type-op> <type-name> { <comma> <name> <type-op> <type-name> }

<struct>        ::= <keyword> <name> <struct-body>
<func-def>      ::= <keyword> <name> <parenth> [ <def-arg-body> ] <parenth> <ret-deref-op> <type-name> <scope-dec>
<import>        ::= <keyword> <ident>

<program>       ::= { ( <import> | <struct> | <func-def> ) }
