<sum-op>        ::= '+' | '-'
<mul-op>        ::= '*' | '/' | '%'
<exp-op>        ::= '^'
<bool-val>      ::= 'true' | 'false'
<bool-op>       ::= '&' | '|'
<cond-op>       ::= '<' | '>' | '>=' | '<=' | '=' | '/='
<bool>          ::= <bool-val> | <bool> [ <cond-op> <bool> ] | <expr> <cond-op> <expr>
<ident>         ::= /[A-Za-z_]+[A-Za-z0-9_]*/ | <expr> '.' <ident>
<string>        ::= /'(\\.|[^'\\])*'/
<integer>       ::= /[0-9]+/
<float>         ::= /[0-9]+/ '.' /[0-9]*/
<sci>           ::= /[0-9]+/ [ '.' /[0-9]*/ ] +/'e' [ ( '+' | '-' ) ] <integer>
<number>        ::= <integer> | <float> | <sci>
<list-body>     ::= '{' [ <expr> { ',' <expr> } ] '}'
<list>          ::= '<' <type-name> '>' <list-body>
<map-body>      ::= '{' [ <expr> ':' <expr> { ',' <expr> ':' <expr } ] '}'
<map>           ::= '<' <type-name> ',' <type-name> '>' <map-body>
<type-name>     ::= [ 'ref' ] { '*' } <ident>

<term>          ::= <ident> | <list> | <map> | <bool> | <string> | <func-call> | <number> | '(' <pow-exp> ')'
<pow-exp>       ::= <unary-op> <pow-exp> | term [ <exp-op> pow-exp ]
<mul-exp>       ::= <pow-exp> { <mul-op> <pow-exp> }
<expr>          ::= <mul-exp> { <sum-op> <mul-exp> }
<arg-body>      ::= [ 'ref' ] { '&' } <expr> { ',' <expr> }
<func-call>     ::= <ident> ( '(' [ <list-body> <r-par> ] ')' )

<declaration>   ::= <ident> [ ':' <type-name> ] [ ':=' <expr> ]
<assignment>    ::= <ident> ':=' <expr>
<if>            ::= 'if' <bool> <scope-dec> { 'elif' <bool> <scope-dec> } [ 'else' <scope-dec> ]
<import>        ::= 'import' <ident>
<stmt>          ::= <declaration> | <assignment> | <func-call> | <if> | <import>
<scope-dec>     ::= '{' { <stmt> ';' } '}'

<class>         ::= 'class' <ident> <scope-dec>
<def-arg-body>  ::= <ident> [ ':' <type-name> ] { ',' <ident> [ ':' <type-name> ] }
<func>          ::= 'fn' <ident> '(' [ <def-arg-body> ] ')' '->' <type-name> <scope-dec>
