<sum-op>        ::= '+' | '-'
<mul-op>        ::= '*' | '/' | '%'
<exp-op>        ::= '^'
<unary-op>      ::= '+' | '-'
<ident>         ::= /[A-Za-z_]+[A-Za-z0-9_]*/ | <expr> '.' <ident>
<string>        ::= /'(\\.|[^'\\])*'/
<integer>       ::= /[0-9]+/
<float>         ::= /[0-9]+/ '.' /[0-9]*/ | '.' /[0-9]+/
<sci>           ::= ( <integer> | <float> ) 'e' [ <unary-op> ] <integer>
<number>        ::= <integer> | <float> | <sci>
<list-body>     ::= '{' [ <expr> { ',' <expr> } ] '}'
<list>          ::= '<' <ident> '>' <list-body>
<map-body>      ::= '{' [ <expr> ':' <expr> { ',' <expr> ':' <expr } ] '}'
<map>           ::= '<' <ident> ',' <ident> '>' <map-body>
<l-par>         ::= '('
<r-par>         ::= ')'

<term>          ::= <ident> | <list> | <map> | <string> | <func-call> | <number> | '(' <pow-exp> ')'
<pow-exp>       ::= <unary-op> <pow-exp> | term [ <exp-op> pow-exp ]
<mul-exp>       ::= <pow-exp> { <mul-op> <pow-exp> }
<expr>          ::= <mul-exp> { <sum-op> <mul-exp> }
<arg-body>      ::= [ 'ref' | 'ptr' ] <expr> { ',' <expr> }
<func-call>     ::= <ident> ( '()' | <l-par> <list-body> <r-par> )

<declaration>   ::= <ident> [ ':' <ident> ] [ ':=' <expr> ]
<assignment>    ::= <ident> ':=' <expr>
<stmt>          ::= <declaration> | <assignment> | <func-call>
<scope-dec>     ::= '{' { <stmt> ';' } '}'

<class>         ::= 'class' <ident> <scope-dec>
